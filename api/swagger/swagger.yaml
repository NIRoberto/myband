swagger: "2.0"
info:
  description: "this is my blog api document"
  version: "1.0.0"
  title: " My blog API documentation"
  termsOfService: "http://twitter.com/RobertNiyitanga"
  contact:
    email: "robertwilly668@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:5000"
basePath: "/api/v1"
schemes:
- "http"
paths:
  /signup:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Define endpoint for creating new user"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "email"
        in: "formData"
        description: "email"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password"
        required: true
        type: "string"
      produces:
      - "application/json"  
      responses:
        '201':
          description: "user created successfull"   
  /login:
    post:
      tags:
      - "user"
      summary: "login user "
      description: " login user in  order to get token "
      operationId: "login  user"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "formData"
        description: "email"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /users/:
    get:
      security:
      - Auth: []  
      tags:
      - "Get all users"
      summary: "Get all users "
      description: " endpoint for getting all user "
      produces:
      - "application/json"
      responses:
        '200':
          description: "success" 
      # security:
      # - Bearer: []       
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /blogs/:
    get:
      tags:
      - "blogs"
      summary: "Get all blog posts"
      description: "define endpoint to retrieve all blog post"
      operationId: "addPet"
      produces:
      - "application/json"
      responses:
        "404":
          description: "not found"
  /blog/{blogid}:
    get:
      tags:
      - "Get single blog"
      summary: "Get a blog post byid"
      description: "get"
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "blogid"
        in: "path"
        description: "ID of blog post"
        required: true
        type: "string"
      responses:
        "200":
          description: "blog schema"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  
  /blog/:
    post:
      security:
      - Auth: [] 
      tags:
      - "Create new blog post"
      summary: "Endpoint for creating new blog post"
      description: "create blog"
      operationId: "updatePetWithForm"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "formData"
        description: "blog post"
        required: true
        type: "string"
      - name: "subbody"
        in: "formData"
        description: "intro to blog"
        required: true
        type: "string"
      - name: "body"
        in: "formData"
        description: "whole  blog text"
        required: true
        type: "string"
      - name: "blogimgs"
        in: "formData"
        description: "image"
        required: true
        type: "file"    
      responses:
        "400":
          description: "All field are required"
   
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
     
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      
 
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  Auth:
   type: apiKey
   name: auth-token
   in: header
definitions:
  Order:
    type: "object"
    properties:
      blogid:
        type: "string"
      title: 
        type: "string"
      subbody:
        type: "string"
      body:
        type: "string"
      blogimgs:
        type: "string"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        description: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"