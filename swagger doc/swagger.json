{
 "swagger": "2.0",
 "info": {
  "description": "This is my personal + blog web  API documentation",
  "version": "1.0.0",
  "title": " This is my personal web + blog API documentation",
  "termsOfService": "http://twitter.com/RobertNiyitanga",
  "contact": {
   "email": "robertwilly668@gmail.com"
  },
  "license": {
   "name": "Apache 2.0",
   "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
  }
 },
 "host": "localhost:5000",
 "basePath": "/api/v1",
 "schemes": [
  "http"
 ],
 "paths": {
  "/signup": {
   "post": {
    "tags": [
     "user"
    ],
    "summary": "Create user",
    "description": "Define endpoint for creating new user",
    "consumes": [
     "application/x-www-form-urlencoded"
    ],
    "parameters": [
     {
      "name": "email",
      "in": "formData",
      "description": "email",
      "required": true,
      "type": "string"
     },
     {
      "name": "password",
      "in": "formData",
      "description": "password",
      "required": true,
      "type": "string"
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "201": {
      "description": "user created successfull and logged in."
     },
     "400": {
      "description": "bad request"
     },
     "409": {
      "description": "bad request"
     }
    }
   }
  },
  "/login": {
   "post": {
    "tags": [
     "user"
    ],
    "summary": " Endpoint for  login users ",
    "description": " login user in  order to get token ",
    "operationId": "login  user",
    "consumes": [
     "application/x-www-form-urlencoded"
    ],
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "email",
      "in": "formData",
      "description": "email",
      "required": true,
      "type": "string"
     },
     {
      "name": "password",
      "in": "formData",
      "description": "password",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "user logging successfully"
     },
     "400": {
      "description": "all field are required"
     }
    }
   }
  },
  "/users/": {
   "get": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "user"
    ],
    "summary": "Get all users ",
    "description": " endpoint for getting all user ",
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "success"
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "not found"
     }
    }
   }
  },
  "/user/{id}": {
   "get": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "user"
    ],
    "summary": "Endpoint for get single user",
    "description": "Get single user",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "description": "ID of user",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "User schema",
      "schema": {
       "$ref": "#/definitions/User"
      }
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "User not found"
     }
    }
   }
  },
  "/user/update/{id}": {
   "patch": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "user"
    ],
    "summary": "Updated user",
    "description": "This can only be done by the logged in user.",
    "operationId": "updateUser",
    "consumes": [
     "application/x-www-form-urlencoded"
    ],
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "description": "user id",
      "required": true,
      "type": "string"
     },
     {
      "name": "email",
      "in": "formData",
      "description": "email",
      "required": true,
      "type": "string"
     },
     {
      "name": "password",
      "in": "formData",
      "description": "password",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "400": {
      "description": "Make sure your input valid data"
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "User not found"
     }
    }
   }
  },
  "/user/delete/{id}": {
   "delete": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "user"
    ],
    "summary": "endpoint for delete users",
    "description": "This can only be done by the admin  user.",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "description": "User id number",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "400": {
      "description": "Invalid username supplied"
     },
     "403": {
      "description": "Cann't delete user its for admin user only"
     },
     "404": {
      "description": "User not found"
     }
    }
   }
  },
  "/blogs/": {
   "get": {
    "tags": [
     "Blog"
    ],
    "summary": "Get all blog posts",
    "description": "Define endpoint to retrieve all blog posts",
    "operationId": "Get all post",
    "produces": [
     "application/json"
    ],
    "responses": {
     "404": {
      "description": "not found"
     }
    }
   }
  },
  "/blog/{blogid}": {
   "get": {
    "tags": [
     "Blog"
    ],
    "summary": "Endpoint for getting single blog post",
    "description": "Get single blog",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "blogid",
      "in": "path",
      "description": "ID of blog post",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "blog schema",
      "schema": {
       "$ref": "#/definitions/Blog"
      }
     },
     "400": {
      "description": "Invalid id "
     },
     "404": {
      "description": "Blog not found"
     }
    }
   }
  },
  "/blog/": {
   "post": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "Blog"
    ],
    "summary": "Endpoint for creating new blog post",
    "description": "Create blog",
    "consumes": [
     "multipart/form-data"
    ],
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "title",
      "in": "formData",
      "description": "Title",
      "required": true,
      "type": "string"
     },
     {
      "name": "subbody",
      "in": "formData",
      "description": "Subbody",
      "required": true,
      "type": "string"
     },
     {
      "name": "body",
      "in": "formData",
      "description": "Body",
      "required": true,
      "type": "string"
     },
     {
      "name": "blogimgs",
      "in": "formData",
      "description": "Image",
      "required": true,
      "type": "file"
     }
    ],
    "responses": {
     "201": {
      "description": "Blog created successfully"
     },
     "400": {
      "description": "All field are required"
     }
    }
   }
  },
  "/blog/update/{id}": {
   "patch": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "Blog"
    ],
    "summary": "Endpoint for update blog post",
    "description": "Update blog post",
    "consumes": [
     "multipart/form-data"
    ],
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "description": "ID of blog post",
      "required": true,
      "type": "string"
     },
     {
      "name": "title",
      "in": "formData",
      "description": "Title",
      "required": true,
      "type": "string"
     },
     {
      "name": "subbody",
      "in": "formData",
      "description": "Subbody",
      "required": true,
      "type": "string"
     },
     {
      "name": "body",
      "in": "formData",
      "description": "Body",
      "required": true,
      "type": "string"
     },
     {
      "name": "blogimgs",
      "in": "formData",
      "description": "Image",
      "required": true,
      "type": "file"
     }
    ],
    "responses": {
     "200": {
      "description": "Update successfull done"
     },
     "400": {
      "description": "All field are required"
     },
     "401": {
      "description": "Unauthorized"
     }
    }
   }
  },
  "/blog/delete/{id}": {
   "delete": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "Blog"
    ],
    "summary": "Endpoint for deletes a blog by id",
    "description": " Delete blog by id",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Delete a blog was successfully done."
     },
     "401": {
      "description": "Unauthorized"
     },
     "403": {
      "description": "Cann't delete blog which is not your"
     },
     "404": {
      "description": "Blog not found"
     }
    }
   }
  },
  "/comments/": {
   "get": {
    "tags": [
     "comment"
    ],
    "summary": "Get all on single comment",
    "description": "define endpoint to retrieve all comment",
    "operationId": "comment",
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "success"
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "not found"
     }
    }
   }
  },
  "/comment/{id}": {
   "get": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "comment"
    ],
    "summary": "Endpoint for getting a single comment",
    "description": "Get single comment",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "description": "ID of blog post",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "comment schema",
      "schema": {
       "$ref": "#/definitions/Comment"
      }
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "Comment not found"
     }
    }
   }
  },
  "/comment/": {
   "post": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "comment"
    ],
    "summary": "Endpoint for creating comment",
    "description": "Create comment",
    "consumes": [
     "multipart/form-data"
    ],
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "fullname",
      "in": "formData",
      "description": "fullname",
      "required": true,
      "type": "string"
     },
     {
      "name": "Email",
      "in": "formData",
      "description": "Email",
      "required": true,
      "type": "string"
     },
     {
      "name": "comment",
      "in": "formData",
      "description": "comment",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "201": {
      "description": "Success"
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "Comment not found"
     }
    }
   }
  },
  "/comment/update/{id}": {
   "patch": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "comment"
    ],
    "summary": "Endpoint for update a comment",
    "description": "Update comment",
    "consumes": [
     "multipart/form-data"
    ],
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "description": "ID of blog post",
      "required": true,
      "type": "string"
     },
     {
      "name": "fullname",
      "in": "formData",
      "description": "Fullname",
      "required": true,
      "type": "string"
     },
     {
      "name": "email",
      "in": "formData",
      "description": "Email",
      "required": true,
      "type": "string"
     },
     {
      "name": "message",
      "in": "formData",
      "description": "Message",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Success"
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "Comment not found"
     }
    }
   }
  },
  "/comment/delete/{id}": {
   "delete": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "comment"
    ],
    "summary": "Endpoint for deletes the comment by id ",
    "description": " Delete comment by id",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Success"
     },
     "401": {
      "description": "Unauthorized"
     },
     "403": {
      "description": "Cann't delete comment which is not your"
     },
     "404": {
      "description": "Comment not found"
     }
    }
   }
  },
  "/questions/": {
   "get": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "Questions"
    ],
    "summary": "Get all question  ",
    "description": "Define endpoint to retrieve all questions",
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "All question are"
     },
     "404": {
      "description": "Not found"
     }
    }
   }
  },
  "/question/{id}": {
   "get": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "Questions"
    ],
    "summary": "Endpoint for getting  a question",
    "description": "Get single question",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "description": "ID of blog post",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "question scheme",
      "schema": {
       "$ref": "#/definitions/questionmodel"
      }
     },
     "400": {
      "description": "You input wrong id"
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "Question not found"
     }
    }
   }
  },
  "/question/": {
   "post": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "Questions"
    ],
    "summary": "Endpoint for creating question",
    "description": "Create question ",
    "consumes": [
     "application/x-www-form-urlencoded"
    ],
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "Fullname",
      "in": "formData",
      "description": "Fullname",
      "required": true,
      "type": "string"
     },
     {
      "name": "Email",
      "in": "formData",
      "description": "Email",
      "required": true,
      "type": "string"
     },
     {
      "name": "message",
      "in": "formData",
      "description": "Message",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "201": {
      "description": "Question created successfull "
     },
     "400": {
      "description": "All feild are required"
     },
     "401": {
      "description": "Unauthorized"
     }
    }
   }
  },
  "/question/delete/{id}": {
   "delete": {
    "security": [
     {
      "Auth": []
     }
    ],
    "tags": [
     "Questions"
    ],
    "summary": "Endpoint for delete one questions ",
    "description": " Delete question by id",
    "produces": [
     "application/json"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Question deleted successfully"
     },
     "401": {
      "description": "Unauthorized"
     },
     "404": {
      "description": "Question not found"
     }
    }
   }
  }
 },
 "securityDefinitions": {
  "Auth": {
   "type": "apiKey",
   "name": "auth-token",
   "in": "header"
  }
 },
 "definitions": {
  "Blog": {
   "type": "object",
   "properties": {
    "blogid": {
     "type": "string"
    },
    "title": {
     "type": "string"
    },
    "subbody": {
     "type": "string"
    },
    "body": {
     "type": "string"
    },
    "blogimgs": {
     "type": "string"
    }
   }
  },
  "Comment": {
   "type": "object",
   "properties": {
    "id": {
     "type": "string"
    },
    "fullname": {
     "type": "string"
    },
    "email": {
     "type": "string"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "questionmodel": {
   "type": "object",
   "properties": {
    "questid": {
     "type": "string"
    },
    "fullname": {
     "type": "string"
    },
    "email": {
     "type": "string"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "User": {
   "type": "object",
   "properties": {
    "id": {
     "type": "string"
    },
    "email": {
     "type": "string"
    },
    "password": {
     "type": "string",
     "description": "User"
    }
   }
  }
 },
 "externalDocs": {
  "description": "This is the end of my Personal web + blog  API documentation",
  "url": "http://swagger.io"
 }
}